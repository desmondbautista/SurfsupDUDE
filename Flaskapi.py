"# Import Dependencies\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "from flask import Flask, jsonify\n",
    "\n",
    "\n",
    "# Database Setup\n",
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")\n",
    "\n",
    "# Reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "\n",
    "# Reflect the tables\n",
    "Base.prepare(engine, reflect=True)\n",
    "\n",
    "# Save reference to the table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station\n",
    "\n",
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "\n",
    "# Flask Setup\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Flask Routes\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    \"\"\"List all available api routes.\"\"\"\n",
    "    return (\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/<start>\"\n",
    "        f\"/api/v1.0/<start>/<end>\"\n",
    "    )\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    \"\"\"Return a list of precipitation data\"\"\"\n",
    "\n",
    "    # Query all \n",
    "    results = session.query(Measurement.date,Measurement.prcp).all()\n",
    "\n",
    "    prcp_data = []\n",
    "    for date in results:\n",
    "        prcp_dict = {}\n",
    "        prcp_dict[date.date] = date.prcp\n",
    "        prcp_data.append(prcp_dict)\n",
    "\n",
    "    return jsonify(prcp_data)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    \"\"\"Return a list of stations\"\"\"\n",
    "\n",
    "    # Query all stations\n",
    "    results = session.query(Measurement.station).group_by(Measurement.station).all()\n",
    "\n",
    "    # Create a list from the row data and append to a list of stations\n",
    "    stations = list(np.ravel(results))\n",
    "\n",
    "    return jsonify(stations)\n",
    "\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def temperature():\n",
    "    \"\"\"Return a list of temperature data\"\"\"\n",
    "    \n",
    "    # Query all tobs\n",
    "    last_date = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "    last_date = str(np.ravel(last_date))\n",
    "\n",
    "    query_date = dt.datetime.strptime(last_date,\"['%Y-%m-%d']\")\n",
    "\n",
    "    year_ago = query_date - dt.timedelta(days=365)\n",
    "\n",
    "    # Perform a query to retrieve the date and tobs scores\n",
    "    sel = [Measurement.date, Measurement.tobs]\n",
    "    results = session.query(*sel).filter(Measurement.date >= year_ago ).all()\n",
    "\n",
    "    tobs_data = []\n",
    "    for date in results:\n",
    "        tobs_dict = {}\n",
    "        tobs_dict[date.date] = date.tobs\n",
    "        tobs_data.append(tobs_dict)\n",
    "\n",
    "    return jsonify(tobs_data)\n",
    "\n",
    "@app.route(\"/api/v1.0/<start>\")\n",
    "def calc_temp_start(start):\n",
    "    \"\"\"Return a list of min, max and avg temperature data without an end date\"\"\"\n",
    "\n",
    "    # Perform a query to retrieve the temp info without end date\n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    results = session.query(*sel).filter(Measurement.date >= start).all()\n",
    "    results = list(np.ravel(results))\n",
    "\n",
    "    tobs_info_start = []\n",
    "    tobs_info_start_dict = {}\n",
    "    tobs_info_start_dict[\"min\"] = results[0]\n",
    "    tobs_info_start_dict[\"avg\"] = results[1]\n",
    "    tobs_info_start_dict[\"max\"] = results[2]\n",
    "    tobs_info_start.append(tobs_info_start_dict)\n",
    "\n",
    "    return jsonify(tobs_info_start)\n",
    "\n",
    "@app.route(\"/api/v1.0/<start>/<end>\")\n",
    "def calc_temp(start,end):\n",
    "    \"\"\"Return a list of min, max and avg temperature data\"\"\"\n",
    "\n",
    "    # Perform a query to retrieve the temp info with both start and end date\n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    results = session.query(*sel).filter(Measurement.date >= start).filter(Measurement.date <= end).all()\n",
    "    results = list(np.ravel(results))\n",
    "\n",
    "    tobs_info = []\n",
    "    tobs_info_dict = {}\n",
    "    tobs_info_dict[\"min\"] = results[0]\n",
    "    tobs_info_dict[\"avg\"] = results[1]\n",
    "    tobs_info_dict[\"max\"] = results[2]\n",
    "    tobs_info.append(tobs_info_dict)\n",
    "\n",
    "    return jsonify(tobs_info)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
